AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Description: >
  REST-no-auth-js

  Sample SAM Template for notes-rest-no-auth-js
 
Globals:
  # Api:
  #   MethodSettings:
  #     - ResourcePath: "/*"
  #       HttpMethod: "*"
  #       DataTraceEnabled: True
  #       LoggingLevel: INFO
  #       MetricsEnabled: True
  Function:
    Runtime: nodejs18.x
    Timeout: 30
    MemorySize: 128
    Architectures:
      - x86_64
    Environment:
      Variables:
        TABLE_NAME: !Ref NotesTable

Resources:
  CreateNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-createNote
      Handler: src/handlers/createNote.handler
      Policies: 
        - DynamoDBWritePolicy:
            TableName: !Ref NotesTable
      Events:
        ApiEvent:
          Type:  Api
          Properties:
            Method: POST
            Path: /notes
            # RestApiId: !Ref NotesApi

  GetUserNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getUserNote
      Handler: src/handlers/getUserNote.handler
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref NotesTable
      Events:
        ApiEvent:
          Type:  Api
          Properties:
            Method: GET
            Path: /notes/{noteId}

  DeleteUserNoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-deleteUserNote
      Handler: src/handlers/deleteUserNote.handler
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref NotesTable
      Events:
        ApiEvent:
          Type:  Api
          Properties:
            Method: DELETE
            Path: /notes/{noteId}
            # RestApiId: !Ref NotesApi

  ListUserNotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-listUserNotes
      Handler: src/handlers/listUserNotes.handler
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref NotesTable
      Events:
        ApiEvent:
          Type: Api 
          Properties:
            Method: GET
            Path: /notes

  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-notesTable
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: noteId
          AttributeType: S 
      KeySchema:
        - AttributeName: userId 
          KeyType: HASH 
        - AttributeName: noteId 
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD_INFREQUENT_ACCESS

#  Define our API Gateway 

  # NotesApi:
  #   Type: AWS::Serverless::Api 
  #   Properties:
  #     Name: !Sub ${AWS::StackName}-api
  #     StageName: Dev 
  #     MethodSettings:
  #       - ResourcePath: "/*"
  #         HttpMethod: "*"
  #         DataTraceEnabled: True
  #         LoggingLevel: INFO
  #         MetricsEnabled: True
  #     Cors:
  #       AllowMethods: "'POST, GET, UPDATE, DELETE'"
  #       AllowHeaders: "'X-Forwarded-For'"
  #       AllowOrigin: "'*'"
  #       MaxAge: "'600'"
  #     DefinitionBody:
  #       'Fn::Transform':
  #         Name: 'AWS::Include'
  #         Parameters:
  #           Location: 'resources/api.yaml'

# Define Execution Role for Lambda and API Gateway for synchronous invocation
  # ApiGatewayExecutionRole:
  #   Type: "AWS::IAM::Role"
  #   Properties: 
  #     AssumeRolePolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         - 
  #           Effect: "Allow"
  #           Principal: 
  #             Service: 
  #               - "apigateway.amazonaws.com"
  #               - "lambda.amazonaws.com"
  #           Action: 
  #             - "sts:AssumeRole"
  #     Path: "/"

  # ApiGatewayExecutionPolicy: 
  #   Type: "AWS::IAM::Policy"
  #   Properties: 
  #     PolicyName: "apigw-execution-policy"
  #     PolicyDocument: 
  #       Version: "2012-10-17"
  #       Statement: 
  #         Action:
  #           - lambda:*
  #         Effect: Allow
  #         Resource: '*'
  #         # Resource: 
  #         #   - !GetAtt CreateNoteFunction.Arn
  #         #   - !GetAtt GetUserNoteFunction.Arn
  #         #   - !GetAtt ListUserNoteFunction.Arn
  #     Roles: 
        # - Ref: "ApiGatewayExecutionRole"

# Outputs:
#   ApiGatewayEndpoint:
#     Description: "API Gateway Endpoint"
#     Value: !Sub "https://${NotesApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/notes/"


